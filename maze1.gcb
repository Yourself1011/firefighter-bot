#Chip 16f18875, 32
#option Explicit

#Define RF PortD.3
#Define RB PortD.2
#Define LF PortD.0
#Define LB PortD.1

Dir RF Out
Dir RB Out
Dir LF Out
Dir LB Out

#define LINE PortA.1
#define FLAME ANA2
#define WALL1 ANA3
#define WALL2 ANA4

Dir LINE In
Dir PortA.2 In
Dir PortA.3 In
Dir PortA.4 In
Dim flameIn as Word
Dim Wall1In as Word
Dim Wall1Dist as Word
Dim Wall2In as Word
Dim Wall2Dist as Word

#define FAN PortA.5
dir FAN out

#define LCD_IO 4
#define LCD_RS PortB.0
#define LCD_RW PortB.1
#define LCD_Enable PortB.2
#define LCD_DB4 PortB.4
#define LCD_DB5 PortB.5
#define LCD_DB6 PortB.6
#define LCD_DB7 PortB.7
#define LCD_LINES 2
#define LCD_WIDTH 16
#define LCD_SPEED Fast

dir LCD_RS out
dir LCD_RW out
dir LCD_Enable out
dir LCD_DB4 out
dir LCD_DB5 out
dir LCD_DB6 out
dir LCD_DB7 out

dim overflows as word
overflows = 0

#define TMR0_8bit
InitTimer0 Osc, PRE0_1 + TMR0_LFINTOSC, POST0_2
T016BIT = 0	' set TMR0 to 8-bit mode
TMR0H = 160	' period register
TMR0L = 0
StartTimer 0	' start timer

on interrupt Timer0Overflow call timerOverflow

sub timerOverflow
    overflows = overflows + 1
end sub

RF = 0
RB = 0
LF = 0
LB = 0

Sub stop ()
    RF = 0
    RB = 0
    LF = 0
    LB = 0
End Sub

Sub fw ()
    RF = 1
    RB = 0
    LF = 1
    LB = 0
End Sub

Sub bw ()
    RF = 0
    RB = 1
    LF = 0
    LB = 1
End Sub

Sub turn_right ()
    RF = 0
    RB = 1
    LF = 1
    LB = 0
End Sub

Sub turn_left ()
    RF = 1
    RB = 0
    LF = 0
    LB = 1
End Sub

Sub slight_right ()
    RF = 0
    RB = 0
    LF = 1
    LB = 0
End Sub

Sub slight_left ()
    RF = 1
    RB = 0
    LF = 0
    LB = 0
End Sub

Sub hard_stop ()
    RF = 1
    RB = 1
    LF = 1
    LB = 1
End Sub

dim refreshTime as Word
refreshTime = 0

dim lineOn as Bit
dim prevLineOn as Bit
dim lineCount as Byte
lineCount = 0
lineOn = 1
prevLineOn = 1

dim lastFlame as Word
lastFlame = 0
dim minFlame as word
minFlame = 65535
dim check1 as Bit
check1 = 0

dim searchCd as Word
searchCd = 0

dim flameCd as word
flameCd = 0

dim gapCd as word
gapCd = 0

' stop = 0, fw = 1, bw = 2, r = 3, l = 4, s_r = 5, s_l = 6, hard stop = 7
#define dirQueueLen 6
dim directions(dirQueueLen) as Byte
dim directionTimes(dirQueueLen) as Byte
dim i as byte
for i = 1 to dirQueueLen
    directions(i) = 0
    directionTimes(i) = 0
next

dim pointerStart as Byte
pointerStart = 1
dim pointerEnd as Byte
pointerEnd = 1

dim lastDirTime as Word
lastDirTime = 0
dim roomChecked as Bit
roomChecked = 1

dim flameFound as bit
flameFound = 0

dim maxWall as word
maxWall = 0
dim minWall as word
minWall = 0
dim immune as byte
' left = 1, right = 2
immune = 0

dim gaps as byte
gaps = 0
dim gapFlag as Bit
gapFlag = 0

dim leftTurns as byte
leftTurns = 0

' direction queue logic
sub addDirection(direction as byte, time as byte)
    if pointerStart = pointerEnd then
        lastDirTime = overflows
    end if
    directions(pointerEnd) = direction
    directionTimes(pointerEnd) = time
    pointerEnd = pointerEnd % dirQueueLen + 1
end sub

sub move
    if directionTimes(pointerStart) + lastDirTime < overflows then
        pointerStart = pointerStart % dirQueueLen + 1
        lastDirTime = overflows

    else
        if directions(pointerStart) = 0 then
            stop
        else if directions(pointerStart) = 1 then
            fw
        else if directions(pointerStart) = 1 then
            bw
        else if directions(pointerStart) = 3 then
            turn_right
        else if directions(pointerStart) = 4 then
            turn_left
        else if directions(pointerStart) = 5 then
            slight_right
        else if directions(pointerStart) = 6 then
            slight_left
        else if directions(pointerStart) = 7 then
            hard_stop
        end if
    end if
end sub

sub clearQueue
    pointerEnd = pointerStart
end sub

function prevDirection as Byte
    prevDirection = directions((pointerEnd + dirQueueLen - 2) % dirQueueLen + 1)
end function

' actions

sub blow ()
    fan = 1

    CLS
    Locate 0, 0
    Print "EXTINGUISHING"
    Locate 1, 0
    Print flameIn

    directions(pointerStart) = 3
    minFlame = flameIn

    do until overflows > flameCd and flameIn > 800
        flameIn = ReadAD10(FLAME)
        if flameCheck = 1 then
            if directions(pointerStart) = 3 then
                turn_right
            else
                turn_left
            end if
        else
            if directions(pointerStart) = 3 then
                turn_left
                directions(pointerStart) = 4
            else
                turn_right
                directions(pointerStart) = 3
            end if
            minFlame = flameIn
        end If

        CLS
        Locate 0, 0
        Print "EXTINGUISHING"
        Locate 1, 0
        Print flameIn
        print " "
        print fan

        if flameIn > 800 and flameCd = 0 then
            if directions(pointerStart) = 3 then
                turn_left
            else
                turn_right
            end if
            wait 40 ms
            stop
            wait 2 s
            flameCd = overflows + 300
            CLS
            Locate 0, 0
            Print "Edging"
            Locate 1, 0
            Print flameIn
        end if
        wait 20 ms
        stop
        wait 1 s
        if flameIn < 800 then
            flameCd = 0
        end if
    loop

    fan = 0
    CLS
    Locate 0, 0
    Print "#1 VICTORY ROYALE"
    turn_right
    wait 500 ms
    stop
end sub

function flameCheck as bit
    if flameIn < minFlame then 'and flameIn < 100 then
        flameCheck = 1
        minFlame = flameIn
    else if flameIn - flameIn / 10 <= minFlame then
        flameCheck = 1
    else
        flameCheck = 0
    end if
end function

function wallCheck as bit
    if wall1In > maxWall then 'and flameIn < 100 then
        wallCheck = 1
        maxWall = wall1In
    else if wall1In + 2 >= maxWall then
        wallCheck = 1
    else
        wallCheck = 0
        maxWall = wall1In
    end if
end function

function wallCheckMin as bit
    if wall1In < minWall then 'and flameIn < 100 then
        wallCheckMin = 1
        minWall = wall1In
    else if wall1In <= minWall then
        wallCheckMin = 1
    else
        wallCheckMin = 0
        minWall = wall1In
    end if
end function

Sub wallHug ()
    if Wall1Dist < 11 and lineCount <> 5 then
        ' turn slightly right
        if wallCheck = 1 then
            addDirection(5, 8)
            addDirection(1, 7)
        else
            ' immune = 2
            ' maxWall = 0
            ' minWall = 65535
            addDirection(1, 20)
        end if
    else if (wall1Dist < 9 and lineCount = 5) then
        if wallCheck = 1 then
            addDirection(5, 4)
            addDirection(1, 7)
        else
            ' immune = 2
            ' maxWall = 0
            ' minWall = 65535
            addDirection(1, 20)
        end if
    else if (Wall1Dist > 15 and lineCount <> 5) or (wall1Dist > 13 and lineCount = 5) then
        ' turn slightly left
        if wallCheckMin = 1 then
            addDirection(6, 9)
            addDirection(1, 13)
        else
            ' immune = 1
            ' maxWall = 0
            ' minWall = 65535
            addDirection(1, 20)
        end if
    else
        ' if wall1Dist <= 14 and wall1Dist >= 9 then
        '     immune = 0
        ' end if
        gosub fw
    end if
End Sub

sub makeReadings
    Wall1In = ReadAD(WALL1) 
    Wall1Dist = ( (6787 / (Wall1In - 3)) - 4) / 5
    Wall2In = ReadAD(WALL2) 
    Wall2Dist = ( (6787 / (Wall2In - 3)) - 4) / 5
    flameIn = ReadAD10(FLAME)
end sub

sub printDebug
    CLS
    Locate 0, 0
    if pointerEnd > pointerStart then
        for i = 1 to pointerEnd - pointerStart
            print directions((pointerStart + i - 2) % dirQueueLen + 1)
            print " "
        next
    else if pointerStart > pointerEnd then
        for i = 1 to dirQueueLen - (pointerStart - pointerEnd) 
            print directions((pointerStart + i - 2) % dirQueueLen + 1)
            print " "
        next
    end if
    locate 1, 0
    ' for i = 1 to dirQueueLen
    '     print directionTimes((pointerStart + i) % dirQueueLen)
    '     print " "
    ' next
    ' print directionTimes(pointerStart)
    ' print " "
    ' print lastDirTime 
    ' print " "
    ' print overflows
    Print "L"
    Print lineCount
    ' print " "
    print "F"
    print flameIn
    ' print "G"
    ' print gaps
    print "T"
    print leftTurns
    ' print "MF:"
    ' print minFlame
    ' print " "
    ' print Wall1In
    ' print " "
    ' print wall2In
    print " "
    print Wall1Dist
    print " "
    print wall2Dist
    ' Locate 1, 0
    ' print "D "
    ' print directions(pointerStart)
end sub

sub bigLeft
    leftTurns = leftTurns + 1
    if lineCount = 6 and leftTurns = 2 then
        clearQueue
        addDirection(7, 10)
        addDirection(5, 8)
        addDirection(1, 95)
    ' else if lineCount = 6 and gaps = 1 then
    '     clearQueue
    '     addDirection(1, 15)
    '     addDirection(7, 10)
    '     addDirection(4, 30)
    '     addDirection(1, 75)
    else 
        clearQueue
        addDirection(1, 15)
        addDirection(7, 10)
        addDirection(4, 30)
        addDirection(7, 10)
        if lineCount = 6 and leftTurns = 1 then
            addDirection(1, 78)
        else
            addDirection(1, 75)
        end if
    end if
    immune = 0
    maxWall = 0
    minWall = 65535
end sub

'fw
wait 10 ms
' addDirection(4, 10)
' addDirection(3, 67)

do
    ' line detection
    lineOn = LINE
    if lineOn = 0 and prevLineOn = 1 Then
        ' catch rising edge of line
        lineCount = lineCount + 1

        if lineCount & 1 = 1 then
            roomChecked = 0
            searchCd = overflows + 75
            addDirection(1, 17)
        end if
        if lineCount = 6 then
            gapCd = overflows + 150
            leftTurns = 0
        end if
    end if
    prevLineOn = lineOn

    if gapCd < overflows and lineCount = 6 then
        gaps = 0
        gapFlag = 1
        gapCd = 65535
    end if

    ' if roomChecked = 0 and overflows > searchCd then
    '     roomChecked = 1
    '     clearQueue
    '     addDirection(4, 10)
    '     addDirection(3, 67)
    '     addDirection(1, 100)
    ' end if

    makeReadings
    
    if refreshTime < overflows then
        printDebug

        refreshTime = overflows + 10
    end if

    ' wall hug
    if gapFlag = 0 and wall1Dist > 30 then
        gapFlag = 1
        gaps += 1
    else if wall1Dist < 27 then
        gapFlag = 0
    end if
    if pointerStart = pointerEnd Then
        wallHug
        if Wall1Dist > 35 then
            ' big space to left, turn 90 degrees
            bigLeft
        else if Wall2Dist < 23 then
            ' wall in front, turn 90 degrees right
            clearQueue
            addDirection(7, 10)
            addDirection(3, 31)
            addDirection(7, 10)
            addDirection(1, 55)
            immune = 0
            maxWall = 0
            minWall = 65535
            gapFlag = 0
        end if 
    end if
    if pointerStart <> pointerEnd then
        move
        if directions(pointerStart) = 3 and Wall1Dist > 35 then
            bigLeft
        end if
    else
        fw
    end if

    if flameIn < 40 and Wall2Dist < 25 and lineCount & 1 = 1 then
        blow
        EXIT Do
    ' else if flameIn < 500 and flameFound = 0 then
    '     flameFound = 1
    '     clearQueue
    '     minFlame = flameIn
    '     addDirection(1, 2)
    ' else if flameIn < 500 and pointerStart = pointerEnd and lineCount & 1 = 1 Then
    '     ' hard_stop
    '     ' locate 0, 8
    '     ' print prevDirection
    '     ' wait 1 s
    '     if flameCheck = 1 Then
    '         if prevDirection = 5 or prevDirection = 3 then
    '             addDirection(5, 5)
    '             addDirection(0, 2)
    '         else 
    '             addDirection(6, 5)
    '             addDirection(0, 2)
    '         end if
    '     else
    '         if prevDirection = 5 or prevDirection = 3 then
    '             addDirection(6, 5)
    '             addDirection(0, 2)
    '         else 
    '             addDirection(5, 5)
    '             addDirection(0, 2)
    '         end if
    '         ' TEMP
    '         minFlame = ReadAD10(FLAME)
    '     end if

        ' if flameCheck Then
        '     if check1 Then
        '         clearQueue
        '         addDirection(6, 5)
        '         addDirection(1, Wall2Dist) ' some ratio
        '     else
        '         check1 = 1
        '     end If
        ' end if

    else
        fan = 0
    end if
loop